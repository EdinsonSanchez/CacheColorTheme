<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="theme.tmEspressoTutti">
<Super>theme.theme</Super>
<TimeCreated>63220,65633.130928</TimeCreated>

<Parameter name="THEMENAME">
<Default>espressotutti</Default>
</Parameter>

<Method name="theme">
<Description><![CDATA[
<var>theme</var> - array. Format: 
s theme(scope)=$lb(foreground,background,bold,italic,underline)
main scopes - http://manual.macromates.com/en/language_grammars#naming_conventions.html
punctuation - http://pastie.org/private/ciiuinopemstdncv1auppa
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*theme:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    
    #define reg(%rgba) $s($e(%rgba,7,8)="":"00",1:$e(%rgba,7,8))_$e(%rgba,5,6)_$e(%rgba,3,4)_$e(%rgba,1,2)
    
    s theme("default")=$lb($$$reg("000000"), $$$reg("FFFFFF")) ;main colors
    s theme("selection")=$lb($$$reg("80C7FF")) ;selection area
    
    s theme("comment")=$lb($$$reg("AAAAAA"))  ; for comments
    s theme("comment.block.documentation")=$lb($$$reg("AAAAAA"))  ; for comments
    
    s theme("constant")=$lb($$$reg("7653C1")) ; various forms of constants.
    s theme("constant.numeric")=$lb($$$reg("CF4F5F")) ; those which represent numbers
    s theme("constant.character")=$lb($$$reg("7653C1")) ; those which represent characters,
    s theme("constant.character.escape")=$lb($$$reg("000000"),$$$reg("E8FFD5")) ; escape sequences like \e
    s theme("constant.language")=$lb($$$reg("7653C2")) ;constants (generally) provided by the language which are “special” like true, false, nil, YES, NO, etc.
    s theme("constant.other")=$lb($$$reg("7653C1")) ;other constants, e.g. colors in CSS.
    
    #; an entity refers to a larger part of the document, for example a chapter, class, function, or tag
    s theme("entity")=$lb($$$reg("D44950")) ;naming the larger entity
    s theme("entity.name")=$lb($$$reg("D44950")) ;naming the larger entity
    s theme("entity.name.function")=$lb($$$reg("3A1D72")) ;the name of a function
    s theme("entity.name.type")=$lb($$$reg("D44950")) ;name of a type declaration or class
    s theme("entity.name.tag")=$lb($$$reg("2F6F9F")) ;tag name.
    s theme("entity.other")=$lb($$$reg("D44950")) ;other entities
    s theme("entity.other.inherited-class")=$lb($$$reg("060708")) ;the superclass/baseclass name
    s theme("entity.other.attribute-name")=$lb($$$reg("4F9FCF")) ;the name of an attribute (mainly in tags)
        
    s theme("invalid")=$lb($$$reg("F9F2CE"),$$$reg("F93232")) ; stuff which is “invalid”
    s theme("invalid.illegal")=$lb($$$reg("F9F2CE"),$$$reg("F93232")) ;illegal, e.g. an ampersand or lower-than character in HTML (which is not part of an entity/tag
    s theme("invalid.deprecated")=$lb($$$reg("F9F2CE"),$$$reg("F93232")) ;for deprecated stuff e.g. using an API function which is deprecated or using styling with strict HTML.
        
    s theme("keyword")=$lb($$$reg("2F6F9F")) ; keywords (when these do not fall into the other groups)
    s theme("keyword.control")=$lb($$$reg("2F6F9F")) ;mainly related to flow control like continue, while, return, etc.
    s theme("keyword.operator")=$lb($$$reg("2F6F9F")) ;operators can either be textual (e.g. or) or be characters
    s theme("keyword.other")=$lb($$$reg("3A1D72")) ;other keywords
        
    s theme("storage")=$lb($$$reg("2F6F9F")) ; things relating to “storage”. the type of something, class, function, int, var,
    s theme("storage.type")=$lb($$$reg("2F6F9F")) ;the type of something, class, function, int, var, etc
    s theme("storage.modifier")=$lb($$$reg("2F6F9F")) ;storage modifier like static, final, abstract, etc
    
    s theme("string")=$lb($$$reg("73B00A")) ; strings.
    s theme("string.quoted")=$lb($$$reg("73B00A")) ;quoted strings
    s theme("string.quoted.double")=$lb($$$reg("D44950")) ;double quoted strings: "foo"
    s theme("string.quoted.other")=$lb($$$reg("73B00A")) ;other types of quoting: $'shell', %s{...}.
    s theme("string.unquoted")=$lb($$$reg("73B00A")) ;for things like here-docs and here-strings.
    s theme("string.regexp")=$lb($$$reg("000000"),$$$reg("E8FFD5")) ;regular expressions: /(\w+)/.
    s theme("string.other")=$lb($$$reg("73B00A")) ;other types of strings (should rarely be used)
        
    s theme("support")=$lb($$$reg("4E279A")) ;  things provided by a framework or library should be BELOW support
    s theme("support.function")=$lb($$$reg("D71707")) ; functions provided by the framework/library
    s theme("support.class")=$lb($$$reg("4E279A")) ; when the framework/library provides classes
    s theme("support.type")=$lb($$$reg("0B51A6")) ; types provided by the framework/library, this is probably only used for languages derived from C, which has typedef (and struct). Most other languages would introduce new types as classes
    s theme("support.constant")=$lb($$$reg("4E279A")) ; constants (magic values) provided by the framework/library
    s theme("support.variable")=$lb($$$reg("4E279A")) ; variables provided by the framework/library. For example NSApp in AppKit.
    s theme("support.other")=$lb($$$reg("4E279A")) ; the above should be exhaustive, but for everything else use support.other.
    
    
    s theme("variable")=$lb($$$reg("7B8C4D")) ; variables. Not all languages allow easy identification
    s theme("variable.parameter")=$lb($$$reg("7B8C4D")) ; when the variable is declared as the parameter
    s theme("variable.language")=$lb($$$reg("7B8C4D")) ; reserved language variables like this, super, self, etc
    s theme("variable.other")=$lb($$$reg("7B8C4D")) ; other variables, like $some_variables
    
    /// punctuation - http://pastie.org/private/ciiuinopemstdncv1auppa     
    #;s theme("punctuation")=$lb($$$reg(""))  
    
    #; Punctuation that is intended to delimit the bounds of a single item, generally 
    #; something that will become a real singular object in compiled/interpreted code.  C
    #;s theme("punctuation.definition")=$lb($$$reg("")) 
    
    #; The start/end of a structured section of some sort (comment, paragraph, opening and 
    #; closing braces in code, etc). 
    #;s theme("punctuation.section")=$lb($$$reg(""))
  
    /*
    Any punctuation intended to separate two internal parts of a logical whole.
    Examples: key-value, list, arguments
    _Notes_: `key-value` refers to the delimiter between a key/value relationship in
    languages like HTML/XML/YAML, should not be used for true assignments.
    */
    #;s theme("punctuation.separator")=$lb($$$reg(""))

    /*
    Punctuation that terminates a statement, rule, etc. (the ; in print "foo";)
    Examples: statement, rule, line 
    */  
    #;s theme("punctuation.terminator")=$lb($$$reg(""))
 
    
    Q 1
]]></Implementation>
</Method>
</Class>
</Export>
